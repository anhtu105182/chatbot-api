const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const db = require('../db');
require('dotenv').config(); // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env


const router = express.Router();

// ƒêƒÉng k√Ω
router.post('/register', async (req, res) => {
    const { username, password, role } = req.body;

    try {
        // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        const [user] = await db.query('SELECT * FROM Users WHERE username = ?', [username]);
        if (user.length > 0) return res.status(400).json({ message: 'Username already exists' });

        // M√£ h√≥a m·∫≠t kh·∫©u
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // L∆∞u ng∆∞·ªùi d√πng m·ªõi v√†o CSDL
        await db.query(
            'INSERT INTO Users (username, password, role) VALUES (?, ?, ?)',
            [username, hashedPassword, role]
        );

        res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
});

// ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        // Ki·ªÉm tra username
        const [user] = await db.query('SELECT * FROM Users WHERE username = ?', [username]);
        if (user.length === 0) return res.status(400).json({ message: 'User not found' });

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const validPassword = await bcrypt.compare(password, user[0].password);
        if (!validPassword) return res.status(400).json({ message: 'Invalid password' });

        // üîπ Ki·ªÉm tra n·∫øu JWT_SECRET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh
        if (!process.env.JWT_SECRET) {
            return res.status(500).json({ error: "JWT_SECRET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong .env" });
        }

        // ‚úÖ T·∫°o token b·∫£o m·∫≠t t·ª´ JWT_SECRET
        const token = jwt.sign(
            { user_id: user[0].user_id },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );
        // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† vai tr√≤
        const userInfo = {
            message: 'Login successful',
            role: user[0].role
        };
        res.json({ token, ...userInfo });


    } catch (error) {
        console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
        res.status(500).json({ message: 'Server error', error });
    }
});

module.exports = router;